name: Deploy CESIZen

on:
  push:
    branches:
      - develop
      - master
      - feat/addSonar

jobs:
  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies for admin
        working-directory: admin-cesizen
        run: npm install --legacy-peer-deps

      - name: Install dependencies for api
        working-directory: api-cesizen
        run: npm install --legacy-peer-deps

      - name: Generate coverage for api
        working-directory: api-cesizen
        run: npm run test -- --coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: RMurier_CESI-BAC-3-CUBE-2-PERSO
          SONAR_ORGANIZATION: rmurier

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_GITHUB }}

      - name: Set image tag
        id: tag
        run: |
          if [[ "${{ github.ref_name }}" == "master" ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=develop" >> $GITHUB_OUTPUT
          fi

      - name: Slugify repository name
        id: slug
        run: |
          repo="${GITHUB_REPOSITORY,,}"
          repo_slug=$(echo "$repo" | tr -cd 'a-z0-9/._-')
          echo "repo_slug=$repo_slug" >> $GITHUB_OUTPUT

      - name: Build and push API image
        run: |
          docker build -t ghcr.io/${{ steps.slug.outputs.repo_slug }}-api:${{ steps.tag.outputs.tag }} -f api-cesizen/Dockerfile.prd ./api-cesizen
          docker push ghcr.io/${{ steps.slug.outputs.repo_slug }}-api:${{ steps.tag.outputs.tag }}

      - name: Build and push Admin image
        run: |
          docker build -t ghcr.io/${{ steps.slug.outputs.repo_slug }}-admin:${{ steps.tag.outputs.tag }} -f admin-cesizen/Dockerfile.prd ./admin-cesizen
          docker push ghcr.io/${{ steps.slug.outputs.repo_slug }}-admin:${{ steps.tag.outputs.tag }}

  deploy-dev:
    name: Deploy DEV to Server
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest

    steps:
      - name: Slugify repository name
        id: slug
        run: |
          repo="${GITHUB_REPOSITORY,,}"
          repo_slug=$(echo "$repo" | tr -cd 'a-z0-9/._-')
          echo "repo_slug=$repo_slug" >> $GITHUB_OUTPUT

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "${{ secrets.TOKEN_GITHUB }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            sudo docker pull ghcr.io/${{ steps.slug.outputs.repo_slug }}-api:develop
            sudo docker pull ghcr.io/${{ steps.slug.outputs.repo_slug }}-admin:develop
            cd ~/dev
            git pull origin develop
            sudo docker compose -f docker-compose.dev.yml up -d --build --no-cache

  deploy-prod:
    name: Deploy PROD to Server
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: Slugify repository name
        id: slug
        run: |
          repo="${GITHUB_REPOSITORY,,}"
          repo_slug=$(echo "$repo" | tr -cd 'a-z0-9/._-')
          echo "repo_slug=$repo_slug" >> $GITHUB_OUTPUT

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "${{ secrets.TOKEN_GITHUB }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            sudo docker pull ghcr.io/${{ steps.slug.outputs.repo_slug }}-api:latest
            sudo docker pull ghcr.io/${{ steps.slug.outputs.repo_slug }}-admin:latest
            cd ~/prd
            git pull origin master
            sudo docker compose -f docker-compose.prd.yml up -d --build --no-cache